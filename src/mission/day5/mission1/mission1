
다음은 학생들의 시험 점수를 관리하는 클래스인 StudentScore입니다.
해당 클래스는 학생들의 시험 점수를 저장하고 접근하는 기능을 제공합니다.
또한,이 클래스들은 모든 학생들의 시험 점수를 관리하는 allScores를 기능도 제공합니다.

allScores 는 방의 모든 StudentScore가 공동으로 접근 하는 값입니다.

StudentScore를 실행한 main 실행 클래스의 코드와 예상 출력값입니다.


[ Main code ]

public class Main {
    public static void main(String[] args) {
        System.out.println("학생들이 아무도 없을 때, 전체 시험 점수: " + Arrays.toString(StudentScore.getAllScores()));

        StudentScore student1 = new StudentScore(85);

        System.out.println("학생이 한명 추가 되었을 떄, 전체 시험 점수: " + Arrays.toString(StudentScore.getAllScores()));

        StudentScore student2 = new StudentScore(90);
        StudentScore student3 = new StudentScore(77);

        System.out.println("여러 명 추가후 전체 시험 점수: " + Arrays.toString(StudentScore.getAllScores()));

        student1.setScore(95);
        student2.setScore(88);
        student3.setScore(55);

        System.out.println("변경된 전체 시험 점수: " + Arrays.toString(StudentScore.getAllScores()));

        StudentScore student4 = new StudentScore(20);

        System.out.println("추가후 전체 시험 점수: " + Arrays.toString(StudentScore.getAllScores()));

        System.out.println("Student1 점수: " + student1.getScore());
        System.out.println("Student2 점수: " + student2.getScore());
        System.out.println("Student3 점수: " + student3.getScore());
        System.out.println("Student4 점수: " + student4.getScore());
    }
}


[ 예상 출력 ]

학생들이 아무도 없을 때, 전체 시험 점수: null
학생이 한명 추가 되었을 떄, 전체 시험 점수: [85]
여러 명 추가후 전체 시험 점수: [85, 90, 77]
변경된 전체 시험 점수: [95, 88, 55]
추가후 전체 시험 점수: [95, 88, 55, 20]
Student1 점수: 95
Student2 점수: 88
Student3 점수: 55
Student4 점수: 20


Base code

public class StudentScore {

    // static
    private static int serialIndex;
    private static int[] allScores;

    private int myIndex;
    private int score;

    public static int[] getAllScores() {
        return allScores;
    }

    public int getScore() {
        return score;
    }

    public void setScore(int score) {
        // TODO: 구현 부분
    }

    public StudentScore(int score) {
        // TODO: 구현 부분
    }

    private static void addAllScore(int score) {
        // TODO: 구현 부분
    }
}


TIP :

allScores 배열은 static 변수로 선언되어야 모든 학생들의 점수를 공유할 수 있습니다.
static 변수들은 static method로 호출되어야 정상적으로 다룰 수 있습니다.
MyIndex와 SerialIndex는 allScores의 값을 수정할 때 유용하게 쓰일 수 있습니다.
serialIndex는 static 변수로 선언되어야 모든 학생들이 공유합니다.
학생 객체가 생성될 때마다 1씩 증가합니다.
Arrays.copyOf 라는 함수를 사용하면 배열의 크기를 늘리는데 유용합니다.