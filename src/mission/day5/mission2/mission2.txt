다음은 전체 도형을 나타내는 클래스 Shape 와
각각 하위 클래스 Circle 과 Rectangle 이 있습니다.

이 때, 각각 Circle, Rectangle의 넓이 구하는 방식은 서로 다르고,
Info는 공통 부분이 있고, 다른 부분도 있다라고 합니다.

위 클래스들을 가지고 Main 실행 클래스를 실행하면 아래와 같습니다.


[ Main code ]

public class Main {
    public static void main(String[] args) {
        Shape shape1 = new Circle("빨강", 4.0);
        Shape shape2 = new Rectangle("파랑", 3.0, 4.0);

        System.out.println("Shape1 면접 크키: " + shape1.getArea());
        System.out.println("Shape2 면접 크키: " + shape2.getArea());

        System.out.println("------------------------");

        if (shape1 instanceof Circle) {
            Circle circle = (Circle) shape1;
            circle.printCircleInfo();
        }

        System.out.println("------------------------");

        if (shape2 instanceof Rectangle) {
            Rectangle rectangle = (Rectangle) shape2;
            rectangle.printRectangleInfo();
        }
    }
}


Shape1 면접 크키: 50.24
Shape2 면접 크키: 12.0
------------------------
도형의 색상: 빨강
도형의 면적: 50.24
원의 반지름: 4.0
------------------------
도형의 색상: 파랑
도형의 면적: 12.0
사각형의 가로 길이: 3.0
사각형의 세로 길이: 4.0


Base code

[ Shape.java ]

class Shape {
    protected String color;

    protected Shape(String color) {
        this.color = color;
    }

    public double getArea() {
        return 0.0;
    }

    protected void printInfo() {
        System.out.println("도형의 색상: " + color);
        System.out.println("도형의 면적: " + getArea());
    }
}


[ Circle.java ]

class Circle extends Shape {
    private static final PI= 3.14;
    private double radius;

    public Circle(String color, double radius) {
        //TODO
 }

    public double getArea() {
        //TODO
 }

    public void printCircleInfo() {
        //TODO
 }
}


[ Rectangle.java ]

class Rectangle extends Shape {
    private double width;
    private double height;

    public Rectangle(String color, double width, double height) {
        // TODO
    }

    @Override
    public double getArea() {
        // TODO
    }

    public void printRectangleInfo() {
        // TODO
    }
}


TIP :

묵시적 형변환을 활용하여 부모 클래스 타입의 변수에 자식 클래스 객체를 저장할 수 있습니다
묵시적 형변환된 변수를 다시 자식 클래스 타입으로 형변환하여 해당 자식 클래스의 메소드를 호출할 수 있습니다.
super 키워드를 사용하여 부모 클래스의 메소드를 호출할 수 있습니다.
@Overriding 을 사용하여 자식 클래스에서 부모 클래스 메소드를 오버라이딩 할 수 있습니다.

