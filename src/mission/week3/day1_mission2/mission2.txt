질문
문제 설명
수업 시간에 배운 메타 프로그래밍과 싱글톤 디자인 패턴을 같이 쓰려고 합니다.
SingletonConfig라는 클래스의 메소드에 @Singleton Annotation과 메소드를 활용하면,
자동으로 싱글톤 만들 수 있게 동작할 수 있다고 합니다.
아래 코드의 Car 과 Book 클래스의 객체를 name 으로 싱글톤으로 사용하려 합니다.
이를 위한 Singleton Annotation 클래스와SingletonContext 클래스의 메소드를 완성 시켜주세요.
아래 Base 코드의 Main을 출력하면 다음과 같이 출력이 나와야합니다.
package assignments.week3.assignment1.answer;

import java.lang.reflect.InvocationTargetException;

public class Main {

    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException {
        SingletonConfig singletonConfig = new SingletonConfig();

        SingletonContext.executeMethodsBySingletonAnnotation(singletonConfig);
        SingletonContext.setConfig(singletonConfig);

        Book book = (Book) SingletonContext.getSingleton("book");
        Book bookCopy1 = (Book) SingletonContext.getSingleton("book");
        Book bookCopy2 = (Book) SingletonContext.getSingleton("book");

        Book book2 = (Book) SingletonContext.getSingleton("book2");

        Car redCar = (Car) SingletonContext.getSingleton("car");
        Car yellowCar = (Car) SingletonContext.getSingleton("car3");
        Car yellowCar2 = (Car) SingletonContext.getSingleton("car3");

        book.displayInfo();
        bookCopy1.displayInfo();
        bookCopy2.displayInfo();

        System.out.println("두 객체는 같나요? " + ( book == bookCopy1 ) );

        book2.displayInfo();

        redCar.showInfo();
        yellowCar.showInfo();
        yellowCar2.showInfo();

        System.out.println("두 객체는 같나요? " + ( redCar == yellowCar ) );
        System.out.println("두 객체는 같나요? " + ( yellowCar == yellowCar2 ) );
    }
}

예상 출력
책 제목: title이고, 작가는 author입니다.
책 제목: title이고, 작가는 author입니다.
책 제목: title이고, 작가는 author입니다.
두 객체는 같나요? true
책 제목: title2이고, 작가는 author2입니다.
이 차의 년식: 2022이고, 색상은 red입니다.
이 차의 년식: 2021이고, 색상은 yellow입니다.
이 차의 년식: 2021이고, 색상은 yellow입니다.
두 객체는 같나요? false
두 객체는 같나요? true

Base code
[Book]

package assignments.week3.assignment1.base;

public class Book {
private String title;
private String author;

public Book() {
}

public Book(String title, String author) {
    this.title = title;
    this.author = author;
}

public void displayInfo() {
    System.out.println("책 제목: " + title + "이고, 작가는 " + author + "입니다.");
}

// 추가적인 메서드들을 정의할 수 있습니다.

}


[Car]

package assignments.week3.assignment1.base;

public class Car {
private int year;
private String color;

public Car() {
}

public Car(int year, String color) {
    this.year = year;
    this.color = color;
}

public void drive() {
    System.out.println(year + "년식 자동차를 주행합니다.");
}

public void stopEngine() {
    System.out.println(year + "년식 자동차의 시동을 끕니다.");
}

public void showInfo() {
    System.out.println("이 차의 년식: " + year + "이고, 색상은 " + color + "입니다.");
}

}


[Main]

package assignments.week3.assignment1.base;

import java.lang.reflect.InvocationTargetException;

public class Main {

public static void main(String[] args) throws InvocationTargetException, IllegalAccessException {
    SingletonConfig singletonConfig = new SingletonConfig();

    SingletonContext.executeMethodsBySingletonAnnotation(singletonConfig);
    SingletonContext.setConfig(singletonConfig);

    Book book = (Book) SingletonContext.getSingleton("book");
    Book bookCopy1 = (Book) SingletonContext.getSingleton("book");
    Book bookCopy2 = (Book) SingletonContext.getSingleton("book");

    Book book2 = (Book) SingletonContext.getSingleton("book2");

    Car redCar = (Car) SingletonContext.getSingleton("car");
    Car yellowCar = (Car) SingletonContext.getSingleton("car3");
    Car yellowCar2 = (Car) SingletonContext.getSingleton("car3");

    book.displayInfo();
    bookCopy1.displayInfo();
    bookCopy2.displayInfo();

    System.out.println("두 객체는 같나요? " + ( book == bookCopy1 ) );

    book2.displayInfo();

    redCar.showInfo();
    yellowCar.showInfo();
    yellowCar2.showInfo();

    System.out.println("두 객체는 같나요? " + ( redCar == yellowCar ) );
    System.out.println("두 객체는 같나요? " + ( yellowCar == yellowCar2 ) );


}

}


[Singleton]

package assignments.week3.assignment1.base;

// TODO: SingleTon Annotation을 만들어주세요. ( hint: Method, Runtime 에 동작 해야합니다. )
public @interface Singleton {
String name();
}


[SingletonConfig]

package assignments.week3.assignment1.base;

public class SingletonConfig {

@Singleton(name = "book")
public Book makeBook(){
    return new Book("title", "author");
}

@Singleton(name = "book2")
public Book makeBook2(){
    return new Book("title2", "author2");
}

@Singleton(name = "car")
public Car makeCar(){
    return new Car(2022, "red");
}

@Singleton(name = "car3")
public Car makeYellowCar(){
    return new Car(2021, "yellow");
}

}


[SingletonContext]

package assignments.week3.assignment1.base;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class SingletonContext {

private static SingletonConfig config;
private static Map<String, Method> singletonMap = new HashMap<>();
private static Map<String, Object> singletonObjectMap = new HashMap<>();

public static void setConfig(SingletonConfig config) {
    SingletonContext.config = config;
}

static synchronized Object getSingleton(String name) {
    //TODO: 아래 구문 삭제 후, Map을 이용한 Singleton 생성 로직 구현 필요합니다.
    return new Object();
}

public static void executeMethodsBySingletonAnnotation(Object object) {
    // TODO - 1: Object 가 들어 오면 해당 클래스의 Method를 돌면서, @Singleton annotation을 발견합니다.
    // TODO - 2: 해당 Annotation의 name 과 method를 적당한 Map에 저장합니다.
}

}




힌트
Annotation 생성 시 사용하는 Meta Annotation 부분 복습 하시면 큰 도움이 되실거같네요.
getSingleton(String name) 메서드를 구현할 때, 주어진 name에 해당하는 싱글톤 객체를 생성하는 데 필요한 메서드는 singletonMap에 이미 저장되어 있습니다. 따라서 singletonMap에서 해당 메서드를 가져와서 적절하게 호출하면 됩니다.
executeMethodsBySingletonAnnotation(Object object) 메서드를 구현할 때, object의 클래스를 가져와서 그 클래스에 선언된 메서드들 중에서 @Singleton Annotation이 적용된 메서드를 찾아야 합니다. 이를 위해 getDeclaredMethods() 메서드와 getDeclaredAnnotations() 메서드를 사용하면 됩니다. 또한, 찾은 @Singleton Annotation과 해당 메서드를 singletonMap에 저장하면 됩니다.