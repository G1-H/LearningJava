질문

아래처럼 고객, 주문, 주문 아이템을 생성해서 처리하는 로직이 있다고 합니다.
기존 코드에서도 로직은 잘 돌아가지만, 가독성과 재사용성을 위해 이번에 배운
ENUM , DATETIME, OPITONAL 등 데이터 타입을 도입해서 리팩토링을 해봅시다.


Base code

[Customer]

package quizzes.week2.quiz6.base;

public class Customer {
private String name;
private int age;
private String gender;

public Customer(String name, int age, String gender) {
    this.name = name;
    this.age = age;
    this.gender = gender;
}

public String getName() {
    return name;
}

@Override
public String toString() {
    return "Customer{" +
           "name='" + name + '\\'' +
           ", age=" + age +
           ", gender='" + gender + '\\'' +
           '}';
}
}


[Main]

package quizzes.week2.quiz6.base;

import java.util.ArrayList;
import java.util.List;

public class Main {
public static void main(String[] args) {
// 1. 고객 생성합니다.
Customer customer1 = new Customer("John Doe", 30, "male");
Customer customer2 = new Customer("Jane Smith", 28, "female");
Customer customer3 = new Customer("Jane ho", 23, "MALE");
Customer customer4 = new Customer("Bob", 21, "FEMALE");

// 2. 주문 아이템을 만듭니다.
    OrderItem item1 = new OrderItem(1, "Keyboard", 35.99, 2);
    OrderItem item2 = new OrderItem(2, "Mouse", 19.99, 3);
    OrderItem item3 = new OrderItem(3, "Monitor", 149.99, 1);

    // 3. 주문 ItemList 제작합니다.
    List<OrderItem> orderItems1 = new ArrayList<>();
    orderItems1.add(item1);
    orderItems1.add(item2);
    orderItems1.add(item3);

    List<OrderItem> orderItems2 = new ArrayList<>();
    orderItems2.add(item1);
    orderItems2.add(item3);

    // 4. 주문 List를 만듭니다.
    List<Order> orders= new ArrayList<>();
    orders.add(new Order(1001, customer1, "2023-11-09", "PAID", orderItems1));
    orders.add(new Order(1002, null, "2023-11-09", "SHIPPED", orderItems2));
    orders.add(new Order(1003, customer3, "2023-11-09", "SHIPPED", orderItems2));
    orders.add(new Order(1004, customer2, "2023-11-09", "ON ORDER", null));
    orders.add(new Order(1005, customer4, "2023-11-09", "NOT PAID", null));
    orders.add(new Order(1006, customer1, "2023-11-09", "SHIPPED", orderItems2));

    // 5. 오늘 주문 수 및 정산 진행합니다.
    double totalRevenue = 0;
    int totalOrderCount = 0;

    for(Order order: orders){
        try {
            if (order.getCustomer() == null) throw new RuntimeException("고객이 누락 되었습니다.");
            if (order.getOrderStatus().equals("주문 처리 중" )) throw new RuntimeException(order.getCustomer() + "님의 주문이 아직 주문 처리 중입니다.");
            if (order.getOrderItems() == null) throw new RuntimeException(order.getCustomer() +"님의 주문 아이템들이 누락 되었습니다.");

            totalOrderCount++;

            for (OrderItem orderItem: order.getOrderItems()){
                totalRevenue += orderItem.getTotalPrice();
            }

        } catch (RuntimeException e){
            System.out.println(e.getMessage() + " 문제로 해당 주문은 SKIP 합니다.");
        }
    }
    System.out.println("오늘 총 " + totalOrderCount + " 주문을 처리 하여 " + totalRevenue + " 수익을 올렸습니다.");
}
}


[Order]

import java.util.List;

public class Order {
private int id;
private Customer customer;
private String orderDate;
private String status;
private List<OrderItem> orderItems;

public Order(int id, Customer customer, String orderDate, String status, List<OrderItem> orderItems) {
    this.id = id;
    this.customer = customer;
    this.orderDate = orderDate;
    this.status = status;
    this.orderItems = orderItems;
}


public String getOrderStatus() {
    if (status.equals("PAID")) {
        return "주문 완료";
    } else if (status.equals("SHIPPED")) {
        return "배송 완료";
    } else if (status.equals("DELIVERED")) {
        return "배송 완료";
    } else {
        return "주문 처리 중";
    }
}

public List<OrderItem> getOrderItems() {
    return orderItems;
}

public Customer getCustomer() {return customer;}
}


[OrderItem]

package quizzes.week2.quiz6.base;

public class OrderItem {
private int itemId;
private String itemName;
private double price;
private int quantity;

public OrderItem(int itemId, String itemName, double price, int quantity) {
    this.itemId = itemId;
    this.itemName = itemName;
    this.price = price;
    this.quantity = quantity;
}

public double getTotalPrice() {
    return price * quantity;
}

}


예상 출력

고객이 누락 되었습니다. 문제로 해당 주문은 SKIP 합니다.
Customer{name='Jane Smith', age=28, gender='female'}님의 주문이 아직 주문 처리 중입니다. 문제로 해당 주문은 SKIP 합니다.
Customer{name='Bob', age=21, gender='FEMALE'}님의 주문이 아직 주문 처리 중입니다. 문제로 해당 주문은 SKIP 합니다.
오늘 총 3 주문을 처리 하여 725.88 수익을 올렸습니다.



TIP

LocalDate 클래스는 Java 8 이상에서 제공되며, 날짜 나타낼 때 적합합니다.
Enum 클래스는 상수를 정의할 때 유용하며, 각 상수에 대한 설명을 담은 필드를 추가할 수 있습니다. * 성별과 주문 상태에 대해 ENUM을 적용하면 좋겠네요.
Optional 클래스를 사용하면 null 값으로 인해 발생하는 예외를 방지할 수 있습니다