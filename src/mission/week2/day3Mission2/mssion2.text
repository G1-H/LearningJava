질문]

주어진 학생들을 관리하는 ClassRoom 클래스와 다양한 종류의 학생 클래스들이 있습니다. 다양한 ClassRoom 객체를 생성하고, 학생들을 추가하고 조회하는 프로그램을 작성하세요.

[Base code]

[Main]

public class Main {
    public static void main(String[] args) {
        ClassRoom<CollegeStudent> allStudentsClassRoom = new ClassRoom<>("전체 교양수업");
        ClassRoom<YoungGroupCollegeStudent> youngGroupClassRoom = new ClassRoom<>("저학년 전용 교양수업");
        ClassRoom<ElderGroupCollegeStudent> elderGroupClassRoom = new ClassRoom<>("고학년 전용 교양수업");
        ClassRoom<Freshman> freshmanClassRoom = new ClassRoom<>("1학년 전공수업");
        ClassRoom<Sophomore> sophomoreClassRoom = new ClassRoom<>("2학년 전공수업");
        ClassRoom<Junior> juniorClassRoom = new ClassRoom<>("3학년 전공수업");
        ClassRoom<Senior> seniorClassRoom = new ClassRoom<>("4학년 전공수업");

        Senior senior1 = new Senior("001", "Larry", 3.7);
        Senior senior2 = new Senior("002", "Bob", 3.5);
        Senior senior3 = new Senior("003", "Eve", 3.8);

        Junior junior1 = new Junior("004", "Kelly", 4.0);
        Junior junior2 = new Junior("005", "Eve", 3.8);
        Junior junior3 = new Junior("006", "Frank", 4.1);

        Sophomore sophomore1 = new Sophomore("007", "Ivy", 3.9);
        Sophomore sophomore2 = new Sophomore("008", "Jack", 3.8);
        Sophomore sophomore3 = new Sophomore("009", "Charlie", 4.0);

        Freshman freshman1 = new Freshman("010", "Grace", 3.6);
        Freshman freshman2 = new Freshman("011", "Henry", 3.3);
        Freshman freshman3 = new Freshman("012", "David", 3.9);

        allStudentsClassRoom.addStudent(freshman1);
        allStudentsClassRoom.addStudent(freshman2);
        allStudentsClassRoom.addStudent(freshman3);
        allStudentsClassRoom.addStudent(sophomore1);
        allStudentsClassRoom.addStudent(sophomore2);
        allStudentsClassRoom.addStudent(sophomore3);
        allStudentsClassRoom.addStudent(junior1);
        allStudentsClassRoom.addStudent(junior2);
        allStudentsClassRoom.addStudent(junior3);
        allStudentsClassRoom.addStudent(senior1);
        allStudentsClassRoom.addStudent(senior2);
        allStudentsClassRoom.addStudent(senior3);

        youngGroupClassRoom.addStudent(freshman1);
        youngGroupClassRoom.addStudent(freshman2);
        youngGroupClassRoom.addStudent(sophomore1);
        youngGroupClassRoom.addStudent(sophomore2);

        elderGroupClassRoom.addStudent(junior1);
        elderGroupClassRoom.addStudent(junior2);
        elderGroupClassRoom.addStudent(senior1);
        elderGroupClassRoom.addStudent(senior2);

        freshmanClassRoom.addStudent(freshman1);
        freshmanClassRoom.addStudent(freshman2);
        freshmanClassRoom.addStudent(freshman3);

        sophomoreClassRoom.addStudent(sophomore1);
        sophomoreClassRoom.addStudent(sophomore2);
        sophomoreClassRoom.addStudent(sophomore3);

        juniorClassRoom.addStudent(junior2);
        juniorClassRoom.addStudent(junior3);

        seniorClassRoom.addStudent(senior2);
        seniorClassRoom.addStudent(senior3);

        System.out.println(allStudentsClassRoom.getStudentByStudentNumber("003"));
        System.out.println(allStudentsClassRoom.getStudentByStudentNumber("006"));
        allStudentsClassRoom.printStudentNames();

        System.out.println(youngGroupClassRoom.getStudentByStudentNumber("010"));
        System.out.println(youngGroupClassRoom.getStudentByStudentNumber("005"));
        youngGroupClassRoom.printStudentNames();

        System.out.println(elderGroupClassRoom.getStudentByStudentNumber("001"));
        System.out.println(elderGroupClassRoom.getStudentByStudentNumber("002"));
        elderGroupClassRoom.printStudentNames();

        System.out.println(freshmanClassRoom.getStudentByStudentNumber("011"));
        freshmanClassRoom.printStudentNames();

        System.out.println(sophomoreClassRoom.getStudentByStudentNumber("008"));
        sophomoreClassRoom.printStudentNames();

        System.out.println(juniorClassRoom.getStudentByStudentNumber("006"));
        juniorClassRoom.printStudentNames();

        System.out.println(seniorClassRoom.getStudentByStudentNumber("002"));
        seniorClassRoom.printStudentNames();
    }
}

[ClassRoom]

class ClassRoom {
public void addStudent(Sophomore sophomore1) {
}

public void addStudent(Freshman freshman1) {
}

public void addStudent(Junior junior2) {
}

public void addStudent(Senior senior2) {
}

}

[CollegeStudent]

abstract class CollegeStudent {

}

[ElderGroupCollegeStudent]

abstract class ElderGroupCollegeStudent extends CollegeStudent {
}

[Freshman]

package assignments.week2.assignment2.base;

class Freshman {

}

[Junior]

class Junior  {
}

[Senior]

class Senior{
}

[Sophomore]

class Sophomore {
}

[YoungGroupCollegeStudent]

abstract class YoungGroupCollegeStudent extends CollegeStudent {
}


[Student 관련 클래스]

abstract class CollegeStudent {

}

abstract class ElderGroupCollegeStudent extends CollegeStudent {
}

abstract class YoungGroupCollegeStudent extends CollegeStudent {
}

class Freshman {

}

class Junior  {
}

class Senior{
}

class Sophomore {
}


[ClassRoom 클래스]

class ClassRoom {
    public void addStudent(Sophomore sophomore1) {
    }

    public void addStudent(Freshman freshman1) {
    }

    public void addStudent(Junior junior2) {
    }

    public void addStudent(Senior senior2) {
    }
}


[애플리케이션을 실행하는 실행 클래스는 아래와 같습니다.]

public class Main {
    public static void main(String[] args) {
        ClassRoom<CollegeStudent> allStudentsClassRoom = new ClassRoom<>("전체 교양수업");
        ClassRoom<YoungGroupCollegeStudent> youngGroupClassRoom = new ClassRoom<>("저학년 전용 교양수업");
        ClassRoom<ElderGroupCollegeStudent> elderGroupClassRoom = new ClassRoom<>("고학년 전용 교양수업");
        ClassRoom<Freshman> freshmanClassRoom = new ClassRoom<>("1학년 전공수업");
        ClassRoom<Sophomore> sophomoreClassRoom = new ClassRoom<>("2학년 전공수업");
        ClassRoom<Junior> juniorClassRoom = new ClassRoom<>("3학년 전공수업");
        ClassRoom<Senior> seniorClassRoom = new ClassRoom<>("4학년 전공수업");

        Senior senior1 = new Senior("001", "Larry", 3.7);
        Senior senior2 = new Senior("002", "Bob", 3.5);
        Senior senior3 = new Senior("003", "Eve", 3.8);

        Junior junior1 = new Junior("004", "Kelly", 4.0);
        Junior junior2 = new Junior("005", "Eve", 3.8);
        Junior junior3 = new Junior("006", "Frank", 4.1);

        Sophomore sophomore1 = new Sophomore("007", "Ivy", 3.9);
        Sophomore sophomore2 = new Sophomore("008", "Jack", 3.8);
        Sophomore sophomore3 = new Sophomore("009", "Charlie", 4.0);

        Freshman freshman1 = new Freshman("010", "Grace", 3.6);
        Freshman freshman2 = new Freshman("011", "Henry", 3.3);
        Freshman freshman3 = new Freshman("012", "David", 3.9);

        allStudentsClassRoom.addStudent(freshman1);
        allStudentsClassRoom.addStudent(freshman2);
        allStudentsClassRoom.addStudent(freshman3);
        allStudentsClassRoom.addStudent(sophomore1);
        allStudentsClassRoom.addStudent(sophomore2);
        allStudentsClassRoom.addStudent(sophomore3);
        allStudentsClassRoom.addStudent(junior1);
        allStudentsClassRoom.addStudent(junior2);
        allStudentsClassRoom.addStudent(junior3);
        allStudentsClassRoom.addStudent(senior1);
        allStudentsClassRoom.addStudent(senior2);
        allStudentsClassRoom.addStudent(senior3);

        youngGroupClassRoom.addStudent(freshman1);
        youngGroupClassRoom.addStudent(freshman2);
        youngGroupClassRoom.addStudent(sophomore1);
        youngGroupClassRoom.addStudent(sophomore2);

        elderGroupClassRoom.addStudent(junior1);
        elderGroupClassRoom.addStudent(junior2);
        elderGroupClassRoom.addStudent(senior1);
        elderGroupClassRoom.addStudent(senior2);

        freshmanClassRoom.addStudent(freshman1);
        freshmanClassRoom.addStudent(freshman2);
        freshmanClassRoom.addStudent(freshman3);

        sophomoreClassRoom.addStudent(sophomore1);
        sophomoreClassRoom.addStudent(sophomore2);
        sophomoreClassRoom.addStudent(sophomore3);

        juniorClassRoom.addStudent(junior2);
        juniorClassRoom.addStudent(junior3);

        seniorClassRoom.addStudent(senior2);
        seniorClassRoom.addStudent(senior3);

        System.out.println(allStudentsClassRoom.getStudentByStudentNumber("003"));
        System.out.println(allStudentsClassRoom.getStudentByStudentNumber("006"));
        allStudentsClassRoom.printStudentNames();

        System.out.println(youngGroupClassRoom.getStudentByStudentNumber("010"));
        System.out.println(youngGroupClassRoom.getStudentByStudentNumber("005"));
        youngGroupClassRoom.printStudentNames();

        System.out.println(elderGroupClassRoom.getStudentByStudentNumber("001"));
        System.out.println(elderGroupClassRoom.getStudentByStudentNumber("002"));
        elderGroupClassRoom.printStudentNames();

        System.out.println(freshmanClassRoom.getStudentByStudentNumber("011"));
        freshmanClassRoom.printStudentNames();

        System.out.println(sophomoreClassRoom.getStudentByStudentNumber("008"));
        sophomoreClassRoom.printStudentNames();

        System.out.println(juniorClassRoom.getStudentByStudentNumber("006"));
        juniorClassRoom.printStudentNames();

        System.out.println(seniorClassRoom.getStudentByStudentNumber("002"));
        seniorClassRoom.printStudentNames();
    }
}


[예상 출력값]

Senior{studentNumber='003', name='Eve', gpa=3.8}
Junior{studentNumber='006', name='Frank', gpa=4.1}
이 클래스 룸(전체 교양수업)은 학생들 [Grace,Henry,David,Ivy,Jack,Charlie,Kelly,Eve,Frank,Larry,Bob,Eve]가 있습니다.
Freshman{studentNumber='010', name='Grace', gpa=3.6}
null
이 클래스 룸(저학년 전용 교양수업)은 학생들 [Grace,Henry,Ivy,Jack]가 있습니다.
Senior{studentNumber='001', name='Larry', gpa=3.7}
Senior{studentNumber='002', name='Bob', gpa=3.5}
이 클래스 룸(고학년 전용 교양수업)은 학생들 [Kelly,Eve,Larry,Bob]가 있습니다.
Freshman{studentNumber='011', name='Henry', gpa=3.3}
이 클래스 룸(1학년 전공수업)은 학생들 [Grace,Henry,David]가 있습니다.
Sophomore{studentNumber='008', name='Jack', gpa=3.8}
이 클래스 룸(2학년 전공수업)은 학생들 [Ivy,Jack,Charlie]가 있습니다.
Junior{studentNumber='006', name='Frank', gpa=4.1}
이 클래스 룸(3학년 전공수업)은 학생들 [Eve,Frank]가 있습니다.
Senior{studentNumber='002', name='Bob', gpa=3.5}
이 클래스 룸(4학년 전공수업)은 학생들 [Bob,Eve]가 있습니다


(추가설명) 각 학생 클래스는 아래와 같습니다.

CollegeStudent 클래스: 모든 학생의 기본 클래스로 사용됩니다.
YoungGroupCollegeStudent 클래스: 1학년과 2학년을 대표하는 클래스입니다
ElderGroupCollegeStudent 클래스: 3학년과 4학년을 대표하는 클래스입니다.
Freshman 클래스: 1학년을 대표하는 클래스입니다.
Sophomore 클래스: 2학년을 대표하는 클래스입니다.
Junior 클래스: 3학년을 대표하는 클래스입니다.
Senior 클래스: 4학년을 대표하는 클래스입니다.


TIP

ClassRoom 클래스의 제네릭 타입 T는 학생 클래스들을 상속받은 클래스들을 지정할 수 있습니다.
addStudent 메서드에서는 전달된 학생 객체를 studentMap에 저장하고, studentNames에 이름과 student 객체를 추가합니다.
getStudentByStudentNumber 메서드에서는 주어진 학번에 해당하는 학생 객체를 studentMap에서 조회하여 반환합니다.
printStudentNames 메서드에서는 studentNames에 저장된 학생들의 이름을 출력합니다.